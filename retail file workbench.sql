-- PROJECT 1


SELECT *
FROM customers;

SELECT *
FROM order_items;

SELECT *
FROM orders;

SELECT *
FROM products;

-- Select Statement
-- 1. Retrieve all columns from the `products` table.
SELECT *
FROM products;

-- 2. Retrieve only the `product_id` and `Product` columns from the `products` table.
SELECT product_id, Product
FROM products;

-- 3. Retrieve the `Customer name` and `city` from the `customers` table.
SELECT Customer_name, city
FROM customers;

-- From Statement

-- 4. Write a query to display all columns from the `orders` table.
SELECT *
FROM orders;

-- 5. Display the `order_id`, `order_date`, and `total_amount` from the `orders` table.
SELECT order_id, order_date, total_amount
FROM orders;

-- Where Statement
-- 6. Retrieve all products from the `products` table where the `price` is greater than 500.
SELECT Product, price
FROM products
WHERE price > 500;

-- 7. Find all customers from the `customers` table who live in "Houston".
SELECT Customer_id, Customer_name, city
FROM customers
WHERE city = "Houston";

-- 8. Retrieve all orders from the `orders` table where the `total_amount` is less than 1000.
SELECT *
FROM orders
WHERE total_amount < 1000;

-- 9. Find all products in the `products` table that belong to the "Electronics" category.
SELECT Product, Category
FROM products
WHERE Category = "Electronics";

-- Group By and Order By
-- 10. Count the number of products in each category from the `products` table and group the results by `Category`.
SELECT COUNT(Product), Category
FROM products
GROUP BY Category;

-- 11. Retrieve the total number of orders placed by each customer from the `orders` table, grouped by `customer_id`.
SELECT COUNT(order_id), customer_id
FROM orders
GROUP BY customer_id;

-- 12. Display the average `price` of products in each category, sorted by the average price in descending order.
SELECT AVG(Price), Category
FROM products
GROUP BY Category 
ORDER BY AVG(Price) DESC;

-- 13. Find the total `quantity` of each product sold from the `order_items` table, grouped by `product_id`.
SELECT SUM(quantity), product_id
FROM order_items
GROUP BY product_id
ORDER BY SUM(quantity);

-- Using Having vs. Where Statement
-- 14. Retrieve categories from the `products` table where the average price is greater than 500 (use `GROUP BY` and `HAVING`).
SELECT AVG(price), Category
FROM products
GROUP BY Category
HAVING AVG(price) > 500;

-- 15. Find customers from the `customers` table who are in the "Young" age bracket (use `WHERE`).
SELECT Customer_id, age, Age_Bracket
FROM customers
WHERE Age_Bracket LIKE "Young";

/*16. Retrieve products from the `products` table where the price is greater than 300 and 
the category is "Accessories" (use `WHERE`).*/
SELECT Product, price, Category
FROM products
WHERE price > 300 AND Category LIKE "Accessories";

-- 17. Display categories from the `products` table that have more than 5 products (use `GROUP BY` and `HAVING`)
SELECT COUNT(product), category
FROM products
GROUP BY Category
HAVING COUNT(product) > 5;

-- PROJECT 1
-- Limit and Aliasing
-- 18. Retrieve the top 5 most expensive products from the `products` table (use `LIMIT`).
SELECT product, MAX(price)
FROM products
GROUP BY Product
HAVING MAX(price) 
LIMIT 5;

-- 19. Display the first 10 orders from the `orders` table, sorted by `order_date` in ascending order.
SELECT order_id, order_date
FROM orders
ORDER BY  order_date ASC
limit 10;

-- 20. Retrieve the `product_id` and `Product` from the `products` table, and alias them as `ID` and `Product Name
SELECT product_id AS ID, Product AS Product_Name
FROM products;

-- 21. Find the top 3 customers with the highest `total_amount` spent from the `orders` table.
SELECT customer_id, MAX(total_amount)
FROM orders
GROUP BY customer_id
LIMIT 3;

-- Joins in MySQL
-- 22. Retrieve the `order_id`, `order_date`, and `Customer name` by joining the `orders` and `customers` tables.
SELECT order_id, order_date, Customer_name
FROM orders AS O
INNER JOIN customers AS C
ON
O.Customer_id = C.customer_id;

-- 23. Display the `product_id`, `Product`, and `quantity` sold by joining the `products` and `order_items` tables.
SELECT p.product_id, p.Product, quantity
FROM products AS p
LEFT JOIN order_items AS OT
ON P.product_id = OT.product_id;

-- 24. Find the total revenue generated by each product by joining the `products` and `order_items` tables.
SELECT p.product_id, p.Product, SUM(OT.quantity * OT.unit_price) AS total_revenue 
FROM products AS p
INNER JOIN order_items AS OT
ON
P.product_id = OT.product_id
GROUP BY p.product_id, p.Product
ORDER BY total_revenue;

-- 25. Retrieve the `Customer name`, `order_date`, and `total_amount` by joining the `customers` and `orders` tables.
SELECT Customer_name, order_date, total_amount
FROM customers AS C
INNER JOIN orders AS O
ON 
c.Customer_id = o.customer_id;

-- 26. Retrieve a list of all unique cities from the `customers` table and combine it with a list of all 
-- unique categories from the `products` table (use `UNION`).
SELECT City
FROM customers
UNION
SELECT Category
FROM products;

-- 27. Combine the `product_id` from the `products` table with the `order_id` from the `orders` table (use `UNION`).
SELECT product_id
FROM products
UNION
SELECT order_id
FROM orders;

-- Case Statements
-- 28. Create a new column in the `products` table called `Price Range` that categorizes products as "Low" (price < 300), "Medium" 
-- (price between 300 and 700), and "High" (price > 700) using a `CASE` statement.

-- CASE STATEMENT (1 -300 = LOW price ,300 - 700 = MEDIUM PRICE, OTHERS = HIGH PRICE)
SELECT product_id, Product, category, price,
CASE 
WHEN price >= 1 AND price <= 300 THEN "low price"
WHEN price >= 301 AND price <= 700 THEN "medium price"
ELSE "high price"
END AS Price_range
FROM products;

-- 29. Use a `CASE` statement to categorize customers in the `customers` table as "Young" (age <= 33), "Working Class" 
-- (age between 34 and 49), and"Retired" (age >= 50).
SELECT Customer_id, Customer_name, Gender, age, Age_Bracket, city,
CASE 
WHEN Age >= 2 AND Age <= 33 THEN "Young"
WHEN Age >= 34 AND Age <= 49 THEN "working class"
ELSE "Retired"
END AS customers
FROM customers;

-- 30. Retrieve the `order_id` and a new column called `Order Size` that categorizes orders as "Small" (total_amount < 500),
 -- "Medium" (total_amount between 500 and 1000), and "Large" (total_amount > 1000) using a `CASE` statement.
 SELECT order_id,
 CASE 
WHEN total_amount > 2 AND total_amount < 499 THEN "small"
WHEN total_amount > 500 AND total_amount < 999 THEN "medium"
ELSE "large"
END AS Order_Size
FROM orders;

-- PROJECT 1
-- Intermediate Challenges
-- 31. Find the top 5 customers who have spent the most money in total (join `customers` and `orders` tables).
SELECT C.Customer_id, C.Customer_name, MAX(total_amount)
FROM customers AS C
LEFT join orders AS O
ON 
C.Customer_id = O.customer_id
GROUP BY C.Customer_id, C.Customer_name
HAVING MAX(total_amount)
LIMIT 5;

-- 32. Retrieve the `Product` name, `Category`, and total revenue generated by each 
-- product (join `products` and `order_items` tables).
SELECT P.Product, P.Category, SUM(OT.quantity * OT.unit_price) AS total_revenue
FROM products AS P
INNER JOIN order_items AS OT
ON 
P.product_id = OT.product_id
GROUP BY P.Product, P.Category
ORDER BY total_Revenue;

-- 33. Display the `Customer name`, `order_date`, and `total_amount` for orders placed in 
-- January 2023 (use `WHERE` with date filtering).
SELECT Customer_name, order_date, total_amount 
FROM customers AS C
INNER JOIN orders AS O
ON 
C.Customer_id = O.customer_id
WHERE order_date BETWEEN "1/1/2023" AND "1/31/2023";

-- 34. Find the average `total_amount` of orders for each customer, and display only those customers whose average
--  order amount is greater than 1000 (use `GROUP BY` and `HAVING`).
SELECT order_id, customer_id, AVG(total_amount)
FROM orders
GROUP BY order_id, customer_id
HAVING AVG(total_amount) > 1000;

-- 35. Retrieve the `Customer name`, `Product`, and `quantity` for all orders placed by customers in 
-- "New York" (join `customers`, `orders`, and `order_items` tables).

SELECT Customer_name, Product, city, quantity
FROM customers AS C
left join orders AS O
ON 
C.Customer_id = O.customer_id
left join order_items AS OT
on 
OT.order_id = O.order_id
left join products AS P
on
OT.product_id = P.product_id
WHERE city = "New york";

-- 36. Find customers who placed orders in both January and February 2023
SELECT order_id, customer_id, order_date
FROM orders
WHERE order_date BETWEEN "1/1/2023" AND "2/29/2023";









